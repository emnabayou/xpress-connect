import { Prisma, fos_user as UserModel, user_serial_number } from 'prisma/prisma-client';
import { PrismaService } from 'src/prisma/prisma.service';
export declare class UsersService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    user(postWhereUniqueInput: Prisma.fos_userWhereUniqueInput): Promise<UserModel>;
    getSerialNumberByUser(userId: number): Promise<user_serial_number | null>;
    addSerialNumber(userId: number, serialNumber: string): Promise<user_serial_number | null>;
    users(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.fos_userWhereUniqueInput;
        where?: Prisma.fos_userWhereInput;
        orderBy?: Prisma.fos_userOrderByWithRelationInput;
    }): Promise<UserModel[]>;
    create(data: Prisma.fos_userCreateInput): Promise<UserModel>;
    updateUser(params: {
        where: Prisma.fos_userWhereUniqueInput;
        data: Prisma.fos_userUpdateInput;
    }): Promise<UserModel>;
    deleteUser(where: Prisma.fos_userWhereUniqueInput): Promise<UserModel>;
    getUserGroups(userId: number): Promise<({
        type_group: {
            id: number;
            code: number;
            name: string;
            prefix: string;
            notification: string;
        };
    } & {
        id: number;
        type_id: number;
        name: string;
        roles: string;
        parent_stocks: number;
        countuser: number;
        customer_charge: boolean;
        type_cna: number;
        is_one_time_session: boolean;
    })[]>;
    getCodeTypeGroup(user: UserModel): Promise<number>;
    getCodeTypeGroupFaster(userGroups: any[]): Promise<any>;
    getUserChildren(userId: number): Promise<{
        id: number;
        parent_user_id: number;
        gouvernorat_id: number;
        delegation_id: number;
        code_postal_id: number;
        username: string;
        username_canonical: string;
        enabled: boolean;
        salt: string;
        password: string;
        last_login: Date;
        locked: boolean;
        expired: boolean;
        expires_at: Date;
        confirmation_token: string;
        password_requested_at: Date;
        roles: string;
        credentials_expired: boolean;
        credentials_expire_at: Date;
        allowreport: boolean;
        allow_mobile_sell: number;
        allow_webservice_sell: number;
        cin: string;
        otp: boolean;
        otp_attempts: number;
        otp_secret: string;
        email_responsable: string;
        fullname: string;
        oldpassword: string;
        phone: number;
        prefix: string;
        address: string;
        email: string;
        email_canonical: string;
        notification: string;
        code_conventionnel: string;
        fax: number;
        matricule_fiscal: string;
        userDistributor_id: number;
        digitalised: boolean;
        activation_story: string;
        userDistributorBO_id: number;
        hierarchy: string;
        withChild: boolean;
        motif_desactivation: string;
        logged: boolean;
        session_id: string;
        mapping_id: string;
        code_bo: number;
        nb_contract_offline_nonRemonte: number;
        delai_remonte_contract_offline: number;
        max_nb_contract_offline_nonRemonte: number;
        max_delai_remonte_contract_offline: number;
    }[]>;
    getUserWithChildrenAndGroup(userId: number): Promise<{
        fos_user_user_group: {
            fos_group: {
                type_group: {
                    code: number;
                };
                parent_stocks: number;
            };
        }[];
        id: number;
        username: string;
        parent_user_id: number;
        parent: {
            id: number;
            parent_user_id: number;
            gouvernorat_id: number;
            delegation_id: number;
            code_postal_id: number;
            username: string;
            username_canonical: string;
            enabled: boolean;
            salt: string;
            password: string;
            last_login: Date;
            locked: boolean;
            expired: boolean;
            expires_at: Date;
            confirmation_token: string;
            password_requested_at: Date;
            roles: string;
            credentials_expired: boolean;
            credentials_expire_at: Date;
            allowreport: boolean;
            allow_mobile_sell: number;
            allow_webservice_sell: number;
            cin: string;
            otp: boolean;
            otp_attempts: number;
            otp_secret: string;
            email_responsable: string;
            fullname: string;
            oldpassword: string;
            phone: number;
            prefix: string;
            address: string;
            email: string;
            email_canonical: string;
            notification: string;
            code_conventionnel: string;
            fax: number;
            matricule_fiscal: string;
            userDistributor_id: number;
            digitalised: boolean;
            activation_story: string;
            userDistributorBO_id: number;
            hierarchy: string;
            withChild: boolean;
            motif_desactivation: string;
            logged: boolean;
            session_id: string;
            mapping_id: string;
            code_bo: number;
            nb_contract_offline_nonRemonte: number;
            delai_remonte_contract_offline: number;
            max_nb_contract_offline_nonRemonte: number;
            max_delai_remonte_contract_offline: number;
        };
        children: {
            id: number;
            username: string;
            parent_user_id: number;
            children: {
                id: number;
                username: string;
                children: {
                    id: number;
                    parent_user_id: number;
                    gouvernorat_id: number;
                    delegation_id: number;
                    code_postal_id: number;
                    username: string;
                    username_canonical: string;
                    enabled: boolean;
                    salt: string;
                    password: string;
                    last_login: Date;
                    locked: boolean;
                    expired: boolean;
                    expires_at: Date;
                    confirmation_token: string;
                    password_requested_at: Date;
                    roles: string;
                    credentials_expired: boolean;
                    credentials_expire_at: Date;
                    allowreport: boolean;
                    allow_mobile_sell: number;
                    allow_webservice_sell: number;
                    cin: string;
                    otp: boolean;
                    otp_attempts: number;
                    otp_secret: string;
                    email_responsable: string;
                    fullname: string;
                    oldpassword: string;
                    phone: number;
                    prefix: string;
                    address: string;
                    email: string;
                    email_canonical: string;
                    notification: string;
                    code_conventionnel: string;
                    fax: number;
                    matricule_fiscal: string;
                    userDistributor_id: number;
                    digitalised: boolean;
                    activation_story: string;
                    userDistributorBO_id: number;
                    hierarchy: string;
                    withChild: boolean;
                    motif_desactivation: string;
                    logged: boolean;
                    session_id: string;
                    mapping_id: string;
                    code_bo: number;
                    nb_contract_offline_nonRemonte: number;
                    delai_remonte_contract_offline: number;
                    max_nb_contract_offline_nonRemonte: number;
                    max_delai_remonte_contract_offline: number;
                }[];
            }[];
        }[];
    }>;
    getListOfPos(user: UserModel, childOnly?: boolean): Promise<string>;
    getListOfPosFaster(userId: number, childOnly?: boolean): Promise<number[]>;
}
